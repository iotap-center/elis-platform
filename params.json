{"name":"Elis-platform","tagline":"http://elis.mah.se","body":"# The Elis Platform\r\n\r\nThis project focuses on exploring the potential of mobile services on mobile devices (e.g. smart phones and tablets) to promote energy efficiency in existing buildings. Read more about the background [here](http://elis.mah.se).\r\n\r\nOther documents also worth checking out: \r\n\r\n* [Build Guide](super/readme.md)\r\n* [Deployment Guide](Deployment%20guide.md)\r\n* Platform documentation (generated upon build, located in super/target/site)\r\n\r\nThe rest of this document describes aspects useful while working on the implementation of Elis. \r\n\r\n## Terminology\r\n\r\n* Bundle - a module that is installable in the Felix runtime\r\n* Provider - a bundle which communicates with, for example, E.On and conforms to the Elis APIs\r\n\r\n## Version management\r\n\r\n**Releases**\r\n\r\nFollows the pattern `major.minor.patch`. _major_ is used when significant new releases are made, e.g., several new APIs are added to the platform. _minor_ is used for smaller updates, e.g., improved performance or small features. _patch_ is used for hotfixes. \r\n\r\n**Bundles**\r\n\r\nFollows the pattern `major.minor.patch`. _major_ is used when a change in the public API isn't backwards compatible. _minor_ is used when the public API is extended in a backwards compatible way. _patch_ is used when the public API is left unchanged (e.g. a bug fix).\r\n\r\n**HTTP API**\r\n\r\nFollows the pattern `/api/v#` where `#` is an ever increasing integer. Update version number for any additions or breaking changes to the API. Breaking changes includes both requests and responses. \r\n\r\n## Referencing bundles\r\n\r\nThe Elis platform consists of a number of API bundles that must be used when implementing a provider. These are: \r\n\r\n* Data definitions\r\n* Elis exceptions\r\n* building api\r\n* automation api\r\n* user service api\r\n* structure api\r\n* storage api\r\n\r\nTo implement a bundle it is only necessary to reference those that are required. \r\n\r\nFor testing it is sometimes necessary to reference an implementation bundle. This is only allowed when testing and, hence, should be marked accordingly in the bundle's POM. For example: \r\n\r\n```xml\r\n<dependency>\r\n  <groupId>org.glassfish.jersey.test-framework.providers</groupId>\r\n  <artifactId>jersey-test-framework-provider-inmemory</artifactId>\r\n  <version>2.6</version>\r\n  <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\n## Logging\r\n\r\nTo use logging in an object it is necessary to reference the OSGI log service. The following example illustrates how. The `bindLog` and `unbindLog` methods are used by the OSGI framework to set a reference to the frameworks's log service.\r\n\r\n```java\r\npackage se.mah.elis.services.demo.users;\r\n\r\nimport org.apache.felix.scr.annotations.Reference;\r\nimport org.osgi.service.log.LogService;\r\n\r\npublic class LoggingExample {\r\n\r\n  @Reference\r\n  private LogService log;\r\n  \r\n  public void callMeMaybe() {\r\n    if (log != null)\r\n      log.log(LogService.LOG_INFO, \"Tada!\");\r\n  }\r\n  \r\n  protected void bindLog(LogService service) {\r\n    log = service;\r\n  }\r\n  \r\n  protected void unbindLog(LogService service) {\r\n    log = null;\r\n  }\r\n}\r\n```\r\n\r\nYour bundle POM file must include the following dependency:\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>org.apache.felix</groupId>\r\n  <artifactId>org.apache.felix.scr.annotations</artifactId>\r\n  <version>1.9.6</version>\r\n</dependency>\r\n```\r\n\r\nFor testing purposes it may be useful to provide a mock log service. This can be done using [Mockito](https://code.google.com/p/mockito/) in the following manner: \r\n\r\n```java\r\nLogService log = mock(LogService.class);\r\ninstanceOfLoggingExample.bindLog(log);\r\n```\r\n\r\n## Configuration\r\n\r\nElis uses the OSGI Configuration Admin service to manage configuration properties for bundles. The configuration management interface can be reached in the [Web Console](http://195.178.234.87:8080/system/console/configMgr).\r\n\r\nAn OSGI service that needs to be configurable must implement the `ManagedService` Java interface. Configuration updates are propagated through the `updated(Dictionary<String, ?>)` method. \r\n\r\n```java\r\n@Component(name = \"ExampleConfigurationService\", immediate = true)\r\n@Service\r\npublic class ExampleService implements ManagedService {\r\n\r\n  // properties\r\n  public static String SERVICE_PID = \"se.mah.elis.adaptor.example.service\";\r\n  public static String PROPERTY_1 = \"se.mah.elis.adaptor.example.service.some_property\";\r\n\r\n  public static Dictionary<String, ?> properties;\r\n\r\n  @Reference\r\n  private ConfigurationAdmin configAdmin;\r\n\r\n  protected void bindConfigAdmin(ConfigurationAdmin ca) {\r\n    configAdmin = ca;\r\n    setConfig();\r\n  }\r\n\r\n  private void setConfig() {\r\n    try {\r\n      Configuration config = configAdmin.getConfiguration(SERVICE_PID);\r\n      properties = config.getProperties();\r\n      \r\n      if (properties == null) \r\n        properties = getDefaultConfiguration(); // not implemented here\r\n      \r\n      config.update(properties);\r\n    } catch (IOException e) {\r\n      // handle this\r\n    }\r\n  }\r\n  \r\n  protected void unbindConfigAdmin(ConfigurationAdmin ca) {\r\n    configAdmin = null;\r\n  }\r\n\r\n  @Override\r\n  public void updated(Dictionary<String, ?> props)\r\n      throws ConfigurationException {\r\n    if (props != null) {\r\n      properties = props;\r\n      // do something is properties change\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nBy default, all Elis specific configuration files are stored in `$FELIX_HOME/elis_conf` and persistent across restarts. \r\n\r\n## Development tools\r\n\r\n### Continuous integration\r\n\r\nEach push to the master branch is automatically built by the Elis [Jenkins server](http://195.178.234.87:8081/). If all tests pass the generated artifacts are automatically deployed to the [staging environment](http://195.178.234.87:8080/). \r\n\r\n### Branching model\r\n\r\nThe Elis project uses Nvie's [git flow](http://nvie.com/posts/a-successful-git-branching-model/) branching model. \r\n\r\n## Contributors\r\n\r\n* [Johan Holmberg](mailto:johan.holmberg@mah.se)\r\n* [Marcus Ljungblad](mailto:marcus@ljungblad.nu)\r\n* [Axel Olsson](mailto:axel.olsson@mah.se)\r\n* [Joakim Lithell](mailto:joakim.lithell@mah.se)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}